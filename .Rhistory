} else if (annot == "Arabidopsis thaliana - TAIR") {
pseq |>
select(2,4,5) |>
rename(UID = gname) |>
inner_join(nozeros |>
select(Proteins:original.id) |>
rownames_to_column(var="UID"), by = "UID") |>
inner_join(pdata |>
mutate(UID = rownames(pdata)), by = "UID") %>%
mutate(log2FC = log2(rowMeans(across(starts_with(comps[i,2])))/rowMeans(across(starts_with(comps[i,1])))),
GeneID = substr(.[]$Proteins,start = 1, stop = 9), .after = UID) |>
left_join(y = read.delim(file = paste0(TMT_NEAT_DIR,"/gene_annotations/ath.csv"),header = TRUE,sep = ",",stringsAsFactors = FALSE),
by = c("GeneID" = "AGI")) %>%
select(1,2,3,26,27, 4:25) -> myresults
}
#save
mycomp = paste0(comps[i,2],"_vs_",comps[i,1])
if (nchar(mycomp)>31){
mysheet = paste0(abbreviate(comps[i,2],minlength=13),"_vs_",abbreviate(comps[i,1],minlength=13))
}else{
mysheet=paste0(comps[i,2],"_vs_",comps[i,1])
}
addWorksheet(wb = newwb2, sheetName = mysheet, gridLines = TRUE)
writeDataTable(wb=newwb2, sheet=mysheet,x=myresults,tableStyle="none",
rowNames=FALSE,withFilter=FALSE,
bandedRows=FALSE,bandedCols=FALSE)
#table formatting for MA and volcano plots
myresults %>%
mutate(mean_mock = rowMeans(select(myresults,starts_with(comps[i,1]))),
mean_treatment = rowMeans(select(myresults, starts_with(comps[i,2])))) -> myData
# Let's now make pretty plots!
if (stat=="q"){ # if we are using qvalue as cutoff stat
myData$DE <- "NS"
myData$DE[signif(myData$fdr,1)<=qval & myData$log2FC < 0] <- "Down"
myData$DE[signif(myData$fdr,1)<=qval & myData$log2FC > 0] <- "Up"
myData$DE <- factor(myData$DE, levels = c("Up", "Down", "NS"))
#make MA plot
MA <- ggplot(myData,
aes(x = log2(mean_mock*mean_treatment)*0.5,
y = log2FC))+
geom_point(color=alpha('black', 0.3), shape=21, size=2, aes(fill=factor(DE))) +
scale_fill_manual(values=alpha(c('#FD6467','#56B4E9','#FDFD96'),0.8)) +
geom_hline(yintercept = 0, linetype = "dashed", color = alpha("black", 0.7), linewidth = 1)+
ggtitle(paste0(comps[i,2],"/",comps[i,1]," (",sum(signif(pseq$fdr,1)<qval)," DE elements)"))+
xlab(label = bquote("A (Average"~log[2]~"Intensity)"))+
ylab(label = bquote("M ("*log[2]~"Fold-change)"))+
labs(fill = element_blank())+
theme_classic()+
theme(axis.title.x = element_text(size =20),
axis.title.y = element_text(size =20),
legend.text = element_text(size=15),
axis.text.x= element_text(size=15),
axis.text.y= element_text(size=15))
# Make volcano plot
volcanoPlot <- ggplot(myData, aes(x = log2FC, y = -log10(fdr)))+
geom_point(color='black', shape=21, size=2, alpha=0.7, aes(fill=factor(DE))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black", linewidth = 1, alpha = 0.7)+
scale_fill_manual(values=c('#FD6467','#56B4E9','#FDFD96' ))+
ggtitle(paste0(comps[i,2],"/",comps[i,1]," (",sum(signif(pseq$fdr,1)<qval)," DE elements)"))+
xlab(label = bquote(log[2]~"Fold-change"))+
ylab(label = bquote(-log[10]~"qvalue"))+
labs(fill = element_blank())+
ylim(0,3)+
xlim(-3,3)+
theme_classic()+
theme(legend.position = "top")
#export plots as PNG images
png(filename = paste0(comps[i,2],"_vs_",comps[i,1],"_MA_plot_",stat,qval,".png"), width = 2500, height = 1500, res = 300)
plot(MA)
dev.off()
png(filename=paste0(comps[i,2],"_vs_",comps[i,1],"_volcano_plot_",stat,qval,".png"),width=2500,height=2000,res=300)
print(volcanoPlot)
dev.off()
} else { # else use pvalue as cutoff stat
myData$DE <- "NS"
myData$DE[myData$pval<=qval & myData$log2FC < 0] <- "Down"
myData$DE[myData$pval<=qval & myData$log2FC > 0] <- "Up"
myData$DE <- factor(myData$DE, levels = c("Up", "Down", "NS"))
#make MA plot
MA <- ggplot(myData,
aes(x = log2(mean_mock*mean_treatment)*0.5,
y = log2FC))+
geom_point(color=alpha('black', 0.3), shape=21, size=2, aes(fill=factor(DE))) +
scale_fill_manual(values=alpha(c('#FD6467','#56B4E9','#FDFD96'),0.8)) +
geom_hline(yintercept = 0, linetype = "dashed", color = alpha("black", 0.7), linewidth = 1)+
ggtitle(paste0(comps[i,2],"/",comps[i,1]," (",sum(pseq$pval<qval)," DE elements)"))+
xlab(label = bquote("A (Average"~log[2]~"Intensity)"))+
ylab(label = bquote("M ("*log[2]~"Fold-change)"))+
labs(fill = element_blank())+
theme_classic()+
theme(axis.title.x = element_text(size =20),
axis.title.y = element_text(size =20),
legend.text = element_text(size=15),
axis.text.x= element_text(size=15),
axis.text.y= element_text(size=15))
#make volcano plot
volcanoPlot <- ggplot(myData, aes(x = log2FC, y = -log10(pval)))+
geom_point(color='black', shape=21, size=2, alpha=0.7, aes(fill=factor(DE))) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black", linewidth = 1, alpha = 0.7)+
scale_fill_manual(values=c('#FD6467','#56B4E9','#FDFD96' ))+
ggtitle(paste0(comps[i,2],"/",comps[i,1]," (",sum(pseq$pval<qval)," DE elements)"))+
xlab(label = bquote(log[2]~"Fold-change"))+
ylab(label = bquote(-log[10]~"pvalue"))+
labs(fill = element_blank())+
ylim(0,3)+
xlim(-3,3)+
theme_classic()+
theme(legend.position = "top")
#Export both plots as PNG images
png(filename = paste0(comps[i,2],"_vs_",comps[i,1],"_MA_plot_",stat,qval,".png"), width = 2500, height = 1500, res = 300)
plot(MA)
dev.off()
png(filename=paste0(comps[i,2],"_vs_",comps[i,1],"_volcano_plot_",stat,qval,".png"),width=2500,height=2000,res=300)
plot(volcanoPlot)
dev.off()
}
#make pvalue and qvalue histogram
png(filename=paste0(comps[i,2],"_vs_",comps[i,1],"_qval_hist.png"),width=2000,height=2000,res=300)
h <- hist(x=pseq$fdr,breaks=100)
plot(h,main="q-value distribution histogram", xlab="q-value")
dev.off()
png(filename=paste0(comps[i,2],"_vs_",comps[i,1],"_pval_hist.png"),width=2000,height=2000,res=300)
h <- hist(x=pseq$pval,breaks=100)
plot(h,main="p-value distribution histogram",xlab="p-value")
dev.off()
#get differentially expressed genes and save
if (stat=="q"){
myresults %>%
filter(signif(fdr,1)<qval, .preserve = TRUE) -> mypros
}else{
myresults %>%
filter(signif(pval,1)<qval, .preserve = TRUE) -> mypros
}
#save
addWorksheet(wb = newwb, sheetName = mysheet, gridLines = TRUE)
writeDataTable(wb=newwb, sheet=mysheet,x=mypros,tableStyle="none",
rowNames=FALSE,withFilter=FALSE,
bandedRows=FALSE,bandedCols=FALSE)
}
#write workbook
if (stat=="q"){
saveWorkbook(newwb, paste("Pseq_all_comps_q",qval,".xlsx",sep=""),overwrite=TRUE)
}else{
saveWorkbook(newwb, paste("Pseq_all_comps_p",qval,".xlsx",sep=""),overwrite=TRUE)
}
saveWorkbook(newwb2, "Pseq_all_comps.xlsx",overwrite=TRUE)
}else{
#save expression values with annotation information
finalimpintensitiesIRS = finalimpintensitiesIRS[order(row.names(finalimpintensitiesIRS)),]
nozeros = nozeros[order(row.names(nozeros)),]
myresults = data.frame(nozeros[row.names(nozeros)%in%row.names(finalimpintensitiesIRS),1:dim(mydata)[2]],finalimpintensitiesIRS)
write.csv(myresults,'Normalized_values.csv')
}
#run all code in this file to start the TMT analysis pipeline
#install pacman, if needed
if (!require('pacman', character.only=T, quietly=T)) {
install.packages('pacman')
library('pacman', character.only=T)
}else{
library('pacman',character.only=T)
}
#install Bioconductor if needed
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install(update = TRUE, ask = FALSE)
}
#install impute (required for permutation FDR correction using samr)
if (!require('impute', character.only=T, quietly=T)) {
BiocManager::install("impute", update = TRUE, ask = FALSE)
}
#check that all packages are installed, and load them using pacman
p_load(ggplot2)
p_load(tibble)
p_load(devtools)
p_load(openxlsx)
p_load(readxl)
p_load(dplyr)
p_load(shiny)
p_load(shinyscreenshot)
p_load(rstatix)
p_load(samr)
p_load(tidyr)
#install PoissonSeq from Github if needed
if (!require('PoissonSeq',quietly=T)) {
devtools::install_github("cran/PoissonSeq", upgrade = "never")
library('PoissonSeq')
}else{
library('PoissonSeq')
}
#install ggbiplot from Github if needed
if (!require('ggbiplot',quietly=T)) {
devtools::install_github("vqv/ggbiplot", upgrade = "never")
library('ggbiplot')
}else{
library('ggbiplot')
}
#install shinyDirectrInput from Github if needed
if (!require('shinyDirectoryInput',quietly=T)) {
devtools::install_github('wleepang/shiny-directory-input',upgrade = "never")
library('shinyDirectoryInput')
}else{
library('shinyDirectoryInput')
}
source("TMT_pseq_pipeline.R")
setwd("C:/Users/chrisfm/Box/Walley Lab/Walley Lab Data/Montes/myGitHubRepos/TMT-NEAT")
#run all code in this file to start the TMT analysis pipeline
#install pacman, if needed
if (!require('pacman', character.only=T, quietly=T)) {
install.packages('pacman')
library('pacman', character.only=T)
}else{
library('pacman',character.only=T)
}
#install Bioconductor if needed
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install(update = TRUE, ask = FALSE)
}
#install impute (required for permutation FDR correction using samr)
if (!require('impute', character.only=T, quietly=T)) {
BiocManager::install("impute", update = TRUE, ask = FALSE)
}
#check that all packages are installed, and load them using pacman
p_load(ggplot2)
p_load(tibble)
p_load(devtools)
p_load(openxlsx)
p_load(readxl)
p_load(dplyr)
p_load(shiny)
p_load(shinyscreenshot)
p_load(rstatix)
p_load(samr)
p_load(tidyr)
#install PoissonSeq from Github if needed
if (!require('PoissonSeq',quietly=T)) {
devtools::install_github("cran/PoissonSeq", upgrade = "never")
library('PoissonSeq')
}else{
library('PoissonSeq')
}
#install ggbiplot from Github if needed
if (!require('ggbiplot',quietly=T)) {
devtools::install_github("vqv/ggbiplot", upgrade = "never")
library('ggbiplot')
}else{
library('ggbiplot')
}
#install shinyDirectrInput from Github if needed
if (!require('shinyDirectoryInput',quietly=T)) {
devtools::install_github('wleepang/shiny-directory-input',upgrade = "never")
library('shinyDirectoryInput')
}else{
library('shinyDirectoryInput')
}
source("TMT_pseq_pipeline.R")
runApp('app.R')
#run all code in this file to start the TMT analysis pipeline
#install pacman, if needed
if (!require('pacman', character.only=T, quietly=T)) {
install.packages('pacman')
library('pacman', character.only=T)
}else{
library('pacman',character.only=T)
}
#install Bioconductor if needed
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install(update = TRUE, ask = FALSE)
}
#install impute (required for permutation FDR correction using samr)
if (!require('impute', character.only=T, quietly=T)) {
BiocManager::install("impute", update = TRUE, ask = FALSE)
}
#check that all packages are installed, and load them using pacman
p_load(ggplot2)
p_load(tibble)
p_load(devtools)
p_load(openxlsx)
p_load(readxl)
p_load(dplyr)
p_load(shiny)
p_load(shinyscreenshot)
p_load(rstatix)
p_load(samr)
p_load(tidyr)
#install PoissonSeq from Github if needed
if (!require('PoissonSeq',quietly=T)) {
devtools::install_github("cran/PoissonSeq", upgrade = "never")
library('PoissonSeq')
}else{
library('PoissonSeq')
}
#install ggbiplot from Github if needed
if (!require('ggbiplot',quietly=T)) {
devtools::install_github("vqv/ggbiplot", upgrade = "never")
library('ggbiplot')
}else{
library('ggbiplot')
}
#install shinyDirectrInput from Github if needed
if (!require('shinyDirectoryInput',quietly=T)) {
devtools::install_github('wleepang/shiny-directory-input',upgrade = "never")
library('shinyDirectoryInput')
}else{
library('shinyDirectoryInput')
}
source("TMT_pseq_pipeline.R")
runApp('app.R')
#pre-set arguments for testing TMT-pipeline script
workdir <- "C:/Users/chrisfm/Box/Walley Lab/Walley Lab Data/Montes/collaborations/Gupta/kinetochore_global/PD3.1_SDG/reps4and5removed"
#datafile <- "proteinGroups.txt"
#datafile <- "Phospho (STY)Sites.txt"
datafile <- "../1025-Sc_Kineto-global-12x1000ng-QE2_SGD_PD3.1.xlsx"
metadatafile <- "sampledata.txt"
exp <- "F1"
REGEX <- "no"
SLN <- "Yes"
#SLN <- "no"
PTM <- "none"
#PTM <- "P"
DE <- "Yes"
stat <- "q"
qval <- 0.1
compsfile <- "comps.xlsx"
annot <- "None"
rm(TMT_pseq_pipeline)
TMT_NEAT_DIR <- getwd()
print(paste0("Working directory: ", workdir))
setwd(workdir)
message("Loading data files...")
#make the peptide ids the row names
data <- read_excel(path = datafile,col_names = TRUE,sheet = 1)
colnames(data)[1] <- "Proteins"
#read in the metadata
metadataorg <- read.table(metadatafile,sep="\t",header=TRUE,stringsAsFactors=FALSE)
#set run basics
metadata <- metadataorg[!grepl('blank',metadataorg$name,ignore.case=TRUE),] #metadata without unused chanels
plex <- length(metadata$sample[metadata$run==1]) #number of TMT channels used
runs <- max(metadata$run) #number of LC-MS/MS runs for this experiment
reps <- metadata$rep #number of replicates per condition
numrefs <- sum(grepl("Ref",metadata$name,ignore.case=TRUE))/runs #number of references per run
intensitiesK<- data |>
select(starts_with(paste0("Abundance: ", exp)), Proteins)
nrow(metadata) < ncol(intensitiesK)-1
intensitiesK <- intensitiesK |>
select(Proteins,unlist(filter(metadataorg, name != "blank") |> select(1), use.names = F))
View(intensitiesK)
#get info for all proteins
mydata = data |>
select(-Contaminant, -starts_with("Abundance"), -Modifications)
newdata <- right_join(mydata,intensitiesK, by = "Proteins")
View(newdata)
colnames(newdata)[(dim(mydata)[2]+1):dim(newdata)[2]]
#replace column names with sample names from the metadata
colnames(newdata)[(dim(mydata)[2]+1):dim(newdata)[2]] <- paste0(metadata$name,"_",metadata$rep)
View(newdata)
#save table
newdata |>
write.csv(file = 'prenormalized_data.csv', row.names = FALSE)
refs <- intensitiesK |>
`colnames<-`(c(paste0(metadata$name,"_",metadata$rep), "Proteins")) |>
column_to_rownames(var = "Proteins") |>
rowMeans()
intensitiesK<- data |>
select(starts_with(paste0("Abundance: ", exp)), Proteins)
intensitiesK <- intensitiesK |>
select(unlist(filter(metadataorg, name != "blank") |> select(1), use.names = F), Proteins)
#get info for all proteins
mydata = data |>
select(-Contaminant, -starts_with("Abundance"), -Modifications)
#replace column names with sample names from the metadata
colnames(newdata)[(dim(mydata)[2]+1):dim(newdata)[2]] <- paste0(metadata$name,"_",metadata$rep)
intensitiesK<- data |>
select(starts_with(paste0("Abundance: ", exp)), Proteins)
#get info for all proteins
mydata = data |>
select(-Contaminant, -starts_with("Abundance"), -Modifications)
rm(newdata)
newdata <- right_join(mydata,intensitiesK, by = "Proteins")
#replace column names with sample names from the metadata
colnames(newdata)[(dim(mydata)[2]+1):dim(newdata)[2]] <- paste0(metadata$name,"_",metadata$rep)
#save table
newdata |>
write.csv(file = 'prenormalized_data.csv', row.names = FALSE)
refs <- intensitiesK |>
`colnames<-`(c(paste0(metadata$name,"_",metadata$rep), "Proteins")) |>
column_to_rownames(var = "Proteins") |>
rowMeans()
refs <- intensitiesK
View(refs)
refs <- intensitiesK |>
`colnames<-`(c(paste0(metadata$name,"_",metadata$rep), "Proteins"))
intensitiesK <- intensitiesK |>
select(unlist(filter(metadataorg, name != "blank") |> select(1), use.names = F), Proteins)
#get info for all proteins
mydata = data |>
select(-Contaminant, -starts_with("Abundance"), -Modifications)
newdata <- right_join(mydata,intensitiesK, by = "Proteins")
#replace column names with sample names from the metadata
colnames(newdata)[(dim(mydata)[2]+1):dim(newdata)[2]] <- paste0(metadata$name,"_",metadata$rep)
#save table
newdata |>
write.csv(file = 'prenormalized_data.csv', row.names = FALSE)
refs <- intensitiesK |>
`colnames<-`(c(paste0(metadata$name,"_",metadata$rep), "Proteins")) |>
column_to_rownames(var = "Proteins") |>
rowMeans()
#run all code in this file to start the TMT analysis pipeline
#install pacman, if needed
if (!require('pacman', character.only=T, quietly=T)) {
install.packages('pacman')
library('pacman', character.only=T)
}else{
library('pacman',character.only=T)
}
#install Bioconductor if needed
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install(update = TRUE, ask = FALSE)
}
#install impute (required for permutation FDR correction using samr)
if (!require('impute', character.only=T, quietly=T)) {
BiocManager::install("impute", update = TRUE, ask = FALSE)
}
#check that all packages are installed, and load them using pacman
p_load(ggplot2)
p_load(tibble)
p_load(devtools)
p_load(openxlsx)
p_load(readxl)
p_load(dplyr)
p_load(shiny)
p_load(shinyscreenshot)
p_load(rstatix)
p_load(samr)
p_load(tidyr)
#install PoissonSeq from Github if needed
if (!require('PoissonSeq',quietly=T)) {
devtools::install_github("cran/PoissonSeq", upgrade = "never")
library('PoissonSeq')
}else{
library('PoissonSeq')
}
#install ggbiplot from Github if needed
if (!require('ggbiplot',quietly=T)) {
devtools::install_github("vqv/ggbiplot", upgrade = "never")
library('ggbiplot')
}else{
library('ggbiplot')
}
#install shinyDirectrInput from Github if needed
if (!require('shinyDirectoryInput',quietly=T)) {
devtools::install_github('wleepang/shiny-directory-input',upgrade = "never")
library('shinyDirectoryInput')
}else{
library('shinyDirectoryInput')
}
source("TMT_pseq_pipeline.R")
setwd("C:/Users/chrisfm/Box/Walley Lab/Walley Lab Data/Montes/myGitHubRepos/TMT-NEAT")
#run all code in this file to start the TMT analysis pipeline
#install pacman, if needed
if (!require('pacman', character.only=T, quietly=T)) {
install.packages('pacman')
library('pacman', character.only=T)
}else{
library('pacman',character.only=T)
}
#install Bioconductor if needed
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
BiocManager::install(update = TRUE, ask = FALSE)
}
#install impute (required for permutation FDR correction using samr)
if (!require('impute', character.only=T, quietly=T)) {
BiocManager::install("impute", update = TRUE, ask = FALSE)
}
#check that all packages are installed, and load them using pacman
p_load(ggplot2)
p_load(tibble)
p_load(devtools)
p_load(openxlsx)
p_load(readxl)
p_load(dplyr)
p_load(shiny)
p_load(shinyscreenshot)
p_load(rstatix)
p_load(samr)
p_load(tidyr)
#install PoissonSeq from Github if needed
if (!require('PoissonSeq',quietly=T)) {
devtools::install_github("cran/PoissonSeq", upgrade = "never")
library('PoissonSeq')
}else{
library('PoissonSeq')
}
#install ggbiplot from Github if needed
if (!require('ggbiplot',quietly=T)) {
devtools::install_github("vqv/ggbiplot", upgrade = "never")
library('ggbiplot')
}else{
library('ggbiplot')
}
#install shinyDirectrInput from Github if needed
if (!require('shinyDirectoryInput',quietly=T)) {
devtools::install_github('wleepang/shiny-directory-input',upgrade = "never")
library('shinyDirectoryInput')
}else{
library('shinyDirectoryInput')
}
source("TMT_pseq_pipeline.R")
runApp('app.R')
